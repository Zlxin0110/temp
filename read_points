#include <ros/ros.h>
#include <GL/glew.h>
#include <GL/glut.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <cstdlib>
#include <vector>
#include <math.h>
#include <thread>
#include <sensor_msgs/PointCloud2.h>
#include <queue>
#include <mutex>
#include <condition_variable>

#define TOPIC_NOT_SUB                       (0) // Topicを購読しない、点群描画
void drawAxes(void)
{
    glBegin(GL_LINES);
    // x軸（red）
    glColor3f(1.0, 0.0, 0.0); 
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(10.0, 0.0, 0.0);
    // y軸（green）
    glColor3f(0.0, 1.0, 0.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(0.0, 10.0, 0.0);
    // z軸（blue）
    glColor3f(0.0, 0.0, 1.0);
    glVertex3f(0.0, 0.0, 0.0);
    glVertex3f(0.0, 0.0, 10.0);
    glEnd();
}
#if TOPIC_NOT_SUB
const int numPoints = 1000;
const float radius = 2.0f;
GLuint vbo = 0; // 初始化为0，表示未创建

void createSpherePointCloud() {
    std::vector<float> vertices;
    vertices.reserve(numPoints * 3);

    for (int i = 0; i < numPoints; ++i) {
        float u = static_cast<float>(rand()) / RAND_MAX * 2 * M_PI;
        float v = static_cast<float>(rand()) / RAND_MAX * M_PI;

        float x = radius * cos(u) * sin(v);
        float y = radius * sin(u) * sin(v);
        float z = radius * cos(v);

        vertices.push_back(x);
        vertices.push_back(y);
        vertices.push_back(z);
    }

    // 创建VBO并传输数据
    glGenBuffers(1, &vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);
}

void drawSpherePointCloud() {
    glEnableClientState(GL_VERTEX_ARRAY);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glVertexPointer(3, GL_FLOAT, 0, nullptr);
    glDrawArrays(GL_POINTS, 0, numPoints);
    glDisableClientState(GL_VERTEX_ARRAY);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    drawSpherePointCloud();

    glutSwapBuffers();
}

void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, static_cast<float>(w) / static_cast<float>(h), 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void cleanup() {
    if (vbo != 0) {
        glDeleteBuffers(1, &vbo);
    }
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Sphere Point Cloud");

    glewInit(); // 初始化 GLEW 库

    glEnable(GL_DEPTH_TEST);

    createSpherePointCloud(); // 创建球体点云

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    atexit(cleanup);

    glutMainLoop();

    return 0;
}
#endif


GLuint vbo; // VBO对象


// FIFO队列和相关的互斥量和条件变量
std::queue<sensor_msgs::PointCloud2::ConstPtr> point_cloud_queue;
std::mutex mtx;
std::condition_variable cv;

void drawSpherePointCloud(const pcl::PointCloud<pcl::PointXYZ>& cloud) {
    std::cout << "+++++drawSpherePointCloud" << std::endl;
    glEnableClientState(GL_VERTEX_ARRAY);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glVertexPointer(3, GL_FLOAT, 0, cloud.points.data());
    glDrawArrays(GL_POINTS, 0, cloud.points.size());
    glDisableClientState(GL_VERTEX_ARRAY);
}


void display() {
    std::cout << "+++++display" << std::endl;
    //glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    //glMatrixMode(GL_MODELVIEW);
    //glLoadIdentity();
    //gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);

    while (true) {
        mtx.lock(); // ロック
        if (!point_cloud_queue.empty()) {
            std::cout << "point_cloud_queue.size() :" << point_cloud_queue.size() << std::endl;
            // キューから点群データを取得する。
            sensor_msgs::PointCloud2::ConstPtr msg = point_cloud_queue.front();
            point_cloud_queue.pop();
            mtx.unlock(); // ロック解除

            pcl::PointCloud<pcl::PointXYZ> cloud;
            pcl::fromROSMsg(*msg, cloud);

            glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
            glLoadIdentity();

            // カメラの位置（視点）
            gluLookAt(5.0, 5.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0);
            drawAxes();

            drawSpherePointCloud(cloud);

            // 画面を更新する。
            glutSwapBuffers();
            //glutPostRedisplay(); // OpenGLへ再描画を通知する。
        }else{
            mtx.unlock(); // ロック解除
        }
        sleep(5);
    }
}

void reshape(int w, int h) {
    std::cout << "+++++reshape" << std::endl;
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, static_cast<float>(w) / static_cast<float>(h), 0.1f, 100.0f);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

// 订阅点云 topic 的回调函数
void pointCloudCallback(const sensor_msgs::PointCloud2::ConstPtr& msg) {
    std::cout << "+++++pointCloudCallback" << std::endl;
    mtx.lock();                     // ロック
    point_cloud_queue.push(msg);    // 受信したポイントクラウドデータをキューに格納します
    mtx.unlock();                   // ロック解除
}
void cleanup() {
    if (vbo != 0) {
        glDeleteBuffers(1, &vbo);
    }
}
// 线程函数，用于处理 FIFO 中的数据并绘制
void processPointCloud(int argc, char** argv) {
#if 0
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Sphere Point Cloud");

    glewInit();
    glEnable(GL_DEPTH_TEST);

    // 创建 VBO
    glGenBuffers(1, &vbo);

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    
    glutMainLoop() ;
 #else
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("Sphere Point Cloud");

    glewInit(); // 初始化 GLEW 库

    glEnable(GL_DEPTH_TEST);
//----
/*
    glClearColor(0.0, 0.0, 0.0, 0.0);

    // プロジェクション行列を設定します
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, 800.0 / 600.0, 1.0, 100.0); // 視野角60度

    // モデルビュー行列を設定します
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    */
///-----


    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    atexit(cleanup);

    glutMainLoop();
#endif
}


int main(int argc, char **argv) {
    ros::init(argc, argv, "lidar_visualization_node");
    ros::NodeHandle nh;

    // 启动处理点云的线程
    std::thread pointCloudThread(processPointCloud, argc, argv);

    // 订阅点云 topic，并将数据传递给回调函数
    ros::Subscriber sub = nh.subscribe("/lidar_points", 1, pointCloudCallback);

    ros::spin(); // 处理 ROS 消息队列

    // 清理资源
    glDeleteBuffers(1, &vbo);
    pointCloudThread.join();

    return 0;
}



=====================================


cmake_minimum_required(VERSION 3.0.2)
project(draw_vba_pkg)

link_directories(/usr/lib/x86_64-linux-gnu)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES draw_vba_pkg
#  CATKIN_DEPENDS roscpp std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########
find_package(OpenGL REQUIRED)
find_package(PCL 1.7 REQUIRED)
find_package(GLEW REQUIRED)

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  /usr/include/GL
  ${catkin_INCLUDE_DIRS}
  ${OPENGL_INCLUDE_DIRS}
  ${PCL_INCLUDE_DIRS}
  ${GLEW_INCLUDE_DIRS}  # 添加 GLEW 头文件路径
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/draw_vba_pkg.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(main_c src/main.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
target_link_libraries(main_c
  ${catkin_LIBRARIES}
  ${OPENGL_LIBRARIES}
  ${PCL_LIBRARIES}
  ${GLEW_LIBRARIES}
  glut
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_draw_vba_pkg.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)



=========================================
sudo apt-get install mesa-common-dev

sudo apt-get install libgl1-mesa-dev
