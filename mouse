glBegin、glVertex3d、glEndで点群が描画できます。

描画方法：
            glColor3f(1.0, 1.0, 1.0);
            glBegin(GL_POINTS);
            for (const auto& point : cloud.points) {
                //std::cout << "x: " << point.x << ",y: " << point.y << ",z: " << point.z << std::endl; 
                glVertex3d(point.x, point.y, point.z);
            }
            glEnd();

また、検証のために4つの実験を行いました。

試験１：トピックを購読せずに、点群を描画します
結論：glBegin、glVertex3d、glEndで点群を描画できる。

試験２：トピックを購読し、コールバック関数内で描画します。
結論：glBegin、glVertex3d、glEndは実行されますが、点群が描画されません（glutMainLoop()必須）

試験３：ros::spin()をMainThreadで実行し、glutMainLoop()をSubThreadで実行します。
結論：①点群が描画できます。
      ②pcl::fromROSMsg(*msg, cloud)を使用すると、点群データの解析が便利になります。
      ③glutPostRedisplay()を呼び出さないと、OpenGLに再描画が行われません。

試験４：ros::spin()をSubThreadで実行し、glutMainLoop()をMainThreadで実行する。
結論：点群を描画できますが、SleepしないとlidarCallbackが呼び出されません。

また、
点群データの解析はPCL（Point Cloud Library）を使用すると簡単です。
インストール：
sudo apt-get install libpcl-dev
CMakeLists.txtの設定：
find_package(PCL 1.7 REQUIRED)

include_directories(

# include
  ...
  ${PCL_INCLUDE_DIRS}
)

add_definitions(${PCL_DEFINITIONS})

target_link_libraries(main_c
  ...
  ${PCL_LIBRARIES}
)


コードは
