void saveRenderbufferToPNG(const std::string& filename, int width, int height) {
    std::vector<unsigned char> pixels(width * height * 4); // RGBA format
    glReadPixels(0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, pixels.data());

    png::image<png::rgba_pixel> image(width, height);
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            int index = (y * width + x) * 4;
            image[y][x] = png::rgba_pixel(pixels[index], pixels[index + 1], pixels[index + 2], pixels[index + 3]);
        }
    }
    image.write(filename);
}

// sudo apt-get update
// sudo apt-get install libjpeg-dev
void saveRenderbufferToJPEG(const std::string& filename, int width, int height) {
    std::vector<unsigned char> pixels(width * height * 4); // RGBA format
    glReadPixels(0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, pixels.data());

    cv::Mat image(height, width, CV_8UC4, pixels.data()); // Create OpenCV Mat from RGBA pixels

    // OpenCV saves the image as BGR format by default, so we need to convert it to RGB
    cv::cvtColor(image, image, cv::COLOR_RGBA2BGRA);

    // Save the image to a JPEG file
    std::vector<int> compression_params;
    compression_params.push_back(cv::IMWRITE_JPEG_QUALITY);
    compression_params.push_back(100); // JPEG quality (0-100)

    cv::imwrite(filename, image, compression_params);
}
void savePixelsToBMP(const std::string& filename, int width, int height) {
    std::vector<unsigned char> pixels(width * height * 4); // RGBA format
    glReadPixels(0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, pixels.data());
    cv::Mat image(height, width, CV_8UC4, pixels.data()); // Create OpenCV Mat from RGBA pixels
    cv::cvtColor(image, image, cv::COLOR_RGBA2BGR);
    
    // Save the image to a BMP file
    std::vector<int> compression_params;
    compression_params.push_back(cv::IMWRITE_PXM_BINARY);
    compression_params.push_back(1); // BMP format

    cv::imwrite(filename, image, compression_params);
}
